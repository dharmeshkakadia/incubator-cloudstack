<?xml version="1.0"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<!--
  components.xml is the configuration file for the VM Ops
  insertion servers.  Someone can quickly pull together an
  insertion server by selecting the correct adapters to use.

  Here are some places to look for information.
    - To find out the general functionality that each Manager 
      or Adapter provide, look at the javadoc for the interface
      that it implements.  The interface is usually the
      "key" attribute in the declaration.
    - To find specific implementation of each Manager or
      Adapter, look at the javadoc for the actual class.  The 
      class can be found in the <class> element.
    - To find out the configuration parameters for each Manager 
      or Adapter, look at the javadoc for the actual implementation
      class.  It should be documented in the description of the 
      class.
    - To know more about the components.xml in general, look for
      the javadoc for ComponentLocator.java.

  If you found that the Manager or Adapter are not properly 
  documented, please contact the author.
-->
<components.xml>
    <interceptor library="org.apache.configuration.DefaultInterceptorLibrary"/>
    <management-server class="org.apache.network.NetworkManagerImpl" library="org.apache.network.NetworkManagerTestComponentLibrary">
        <dao name="Configuration configuration server" class="org.apache.configuration.dao.ConfigurationDaoImpl">
             <param name="premium">true</param>
        </dao>
        <adapters key="org.apache.network.guru.NetworkGuru">
            <!--
                 NOTE: The order of those gurus implicates priority of network traffic types the guru implements.
                 The upper the higher priority. It effects listTafficTypeImplementors API which returns impelmentor
                 of a specific network traffic.
                 A fair question is, if two gurus implement the same two network traffic types, but these traffic types
                 have cross priority, how to rank them? For example:
                    GuruA (TrafficTypeA, TrafficTypeB)
                    GuruB (TrafficTypeA, TrafficTypeB)
                 we want GuruB.TrafficTypeB > GuruA.TrafficTypeB and GuruB.TrafficTypeA < GuruA.TrafficTypeA. As the priority
                 implicated by order can not map to multiple traffic type, you have to do implement GuruC which inherits GuruB
                 for TrafficTypeB. Then ranking them in order of:
                    GuruC (TrafficTypeB)
                    GuruA (TrafficTypeA, TrafficTypeB)
                    GuruB (TrafficTypeA, TrafficTypeB)
                 now GuruC represents TrafficTypeB with highest priority while GuruA represents TrafficTypeA with highest pirority.

                 However, above case barely happens.
            -->

            <adapter name="StorageNetworkGuru" class="org.apache.network.guru.StorageNetworkGuru"/>
            <adapter name="ExternalGuestNetworkGuru" class="org.apache.network.guru.ExternalGuestNetworkGuru"/>
            <adapter name="PublicNetworkGuru" class="org.apache.network.guru.PublicNetworkGuru"/>
            <adapter name="PodBasedNetworkGuru" class="org.apache.network.guru.PodBasedNetworkGuru"/>
            <adapter name="ControlNetworkGuru" class="org.apache.network.guru.ControlNetworkGuru"/>
            <adapter name="DirectNetworkGuru" class="org.apache.network.guru.DirectNetworkGuru"/>
            <adapter name="DirectPodBasedNetworkGuru" class="org.apache.network.guru.DirectPodBasedNetworkGuru"/>
            <!--<adapter name="OvsGuestNetworkGuru" class="org.apache.network.guru.OvsGuestNetworkGuru"/> -->
            <adapter name="PrivateNetworkGuru" class="org.apache.network.guru.PrivateNetworkGuru"/>
            <!--<adapter name="NiciraNvpGuestNetworkGuru" class="org.apache.network.guru.NiciraNvpGuestNetworkGuru"/> -->
        </adapters>
        <adapters key="org.apache.network.IpAddrAllocator">
            <adapter name="Basic" class="org.apache.network.ExternalIpAddressAllocator"/>
        </adapters>
        <adapters key="org.apache.network.element.NetworkElement">
            <adapter name="VirtualRouter" class="org.apache.network.element.VirtualRouterElement"/>
            <!--<adapter name="Ovs" class="org.apache.network.element.OvsElement"/> -->
            <!--<adapter name="ExternalDhcpServer" class="org.apache.network.element.ExternalDhcpElement"/>-->
            <adapter name="BareMetal" class="org.apache.network.element.BareMetalElement"/>
            <adapter name="SecurityGroupProvider" class="org.apache.network.element.SecurityGroupElement"/>
            <adapter name="VpcVirtualRouter" class="org.apache.network.element.VpcVirtualRouterElement"/>
            <!--<adapter name="NiciraNvp" class="org.apache.network.element.NiciraNvpElement"/> -->
        </adapters>
        <adapters key="org.apache.network.element.FirewallServiceProvider">
            <adapter name="VirtualRouter" class="org.apache.network.element.VirtualRouterElement"/>
            <adapter name="VpcVirtualRouter" class="org.apache.network.element.VpcVirtualRouterElement"/>
        </adapters>
        <adapters key="org.apache.network.element.DhcpServiceProvider">
            <adapter name="VirtualRouter" class="org.apache.network.element.VirtualRouterElement"/>
            <adapter name="VpcVirtualRouter" class="org.apache.network.element.VpcVirtualRouterElement"/>
            <adapter name="ExternalDhcpElement" class="org.apache.network.element.ExternalDhcpElement"/>
        </adapters>
        <adapters key="org.apache.network.element.UserDataServiceProvider">
            <adapter name="VirtualRouter" class="org.apache.network.element.VirtualRouterElement"/>
            <adapter name="VpcVirtualRouter" class="org.apache.network.element.VpcVirtualRouterElement"/>
        </adapters>
        <adapters key="org.apache.network.element.SourceNatServiceProvider">
            <adapter name="VirtualRouter" class="org.apache.network.element.VirtualRouterElement"/>
            <adapter name="VpcVirtualRouter" class="org.apache.network.element.VpcVirtualRouterElement"/>
            <!--<adapter name="NiciraNvp" class="org.apache.network.element.NiciraNvpElement"/>   -->
        </adapters>
        <adapters key="org.apache.network.element.StaticNatServiceProvider">
            <adapter name="VpcVirtualRouter" class="org.apache.network.element.VpcVirtualRouterElement"/>
            <adapter name="VirtualRouter" class="org.apache.network.element.VirtualRouterElement"/>
            <!-- <adapter name="NiciraNvp" class="org.apache.network.element.NiciraNvpElement"/> -->
        </adapters>
        <adapters key="org.apache.network.element.PortForwardingServiceProvider">
            <adapter name="VirtualRouter" class="org.apache.network.element.VirtualRouterElement"/>
            <adapter name="VpcVirtualRouter" class="org.apache.network.element.VpcVirtualRouterElement"/>
            <!-- <adapter name="NiciraNvp" class="org.apache.network.element.NiciraNvpElement"/> -->
        </adapters>
        <adapters key="org.apache.network.element.LoadBalancingServiceProvider">
            <adapter name="VirtualRouter" class="org.apache.network.element.VirtualRouterElement"/>
            <adapter name="VpcVirtualRouter" class="org.apache.network.element.VpcVirtualRouterElement"/>
        </adapters>
        <adapters key="org.apache.network.element.RemoteAccessVPNServiceProvider">
            <adapter name="VirtualRouter" class="org.apache.network.element.VirtualRouterElement"/>
        </adapters>
        <adapters key="org.apache.network.element.Site2SiteVpnServiceProvider">
            <adapter name="VpcVirtualRouter" class="org.apache.network.element.VpcVirtualRouterElement"/>
        </adapters>
        <adapters key="org.apache.network.element.IpDeployer">
            <adapter name="VirtualRouter" class="org.apache.network.element.VirtualRouterElement"/>
            <adapter name="VpcVirtualRouter" class="org.apache.network.element.VpcVirtualRouterElement"/>
            <!-- <adapter name="NiciraNvp" class="org.apache.network.element.NiciraNvpElement"/> -->
        </adapters>
        <adapters key="org.apache.network.element.ConnectivityProvider">
            <!-- <adapter name="NiciraNvp" class="org.apache.network.element.NiciraNvpElement"/> -->
        </adapters>
        <adapters key="org.apache.network.element.NetworkACLServiceProvider">
            <adapter name="VpcVirtualRouter" class="org.apache.network.element.VpcVirtualRouterElement"/>
        </adapters>
        <adapters key="org.apache.network.element.VpcProvider">
            <adapter name="VpcVirtualRouter" class="org.apache.network.element.VpcVirtualRouterElement"/>
        </adapters>

        <!--<manager name="OvsTunnelManager" key="org.apache.network.ovs.OvsTunnelManager" class="org.apache.network.ovs.OvsTunnelManagerImpl"/>-->
        <!--<manager name="ElasticLoadBalancerManager" key="org.apache.network.lb.ElasticLoadBalancerManager" class="org.apache.network.lb.ElasticLoadBalancerManagerImpl"/>-->
        <pluggableservice name="VirtualRouterElementService" key="org.apache.network.element.VirtualRouterElementService" class="org.apache.network.element.VirtualRouterElement"/>
        <!-- <pluggableservice name="NiciraNvpElementService" key="org.apache.network.element.NiciraNvpElementService" class="org.apache.network.element.NiciraNvpElement"/> -->
        <!--<dao name="OvsTunnelInterfaceDao" class="org.apache.network.ovs.dao.OvsTunnelInterfaceDaoImpl" singleton="false"/> -->
        <!--<dao name="OvsTunnelAccountDao" class="org.apache.network.ovs.dao.OvsTunnelNetworkDaoImpl" singleton="false"/> -->
        <!--<dao name="NiciraNvpDao" class="org.apache.network.dao.NiciraNvpDaoImpl" singleton="false"/> -->
        <!--<dao name="NiciraNvpNicMappingDao" class="org.apache.network.dao.NiciraNvpNicMappingDaoImpl" singleton="false"/> -->
        <!--<dao name="NiciraNvpRouterMappingDao" class="org.apache.network.dao.NiciraNvpRouterMappingDaoImpl" singleton="false"/> -->
        <!--<dao name="ElasticLbVmMapDao" class="org.apache.network.lb.dao.ElasticLbVmMapDaoImpl" singleton="false"/> -->
    </management-server>

    <configuration-server class="org.apache.server.ConfigurationServerImpl">
        <dao name="Configuration configuration server" class="org.apache.configuration.dao.ConfigurationDaoImpl" singleton="false">
             <param name="premium">true</param>
        </dao>
        <dao name="Snapshot policy defaults" class="org.apache.storage.dao.SnapshotPolicyDaoImpl" singleton="false"/>
        <dao name="DiskOffering configuration server" class="org.apache.storage.dao.DiskOfferingDaoImpl" singleton="false"/>         
        <dao name="ServiceOffering configuration server" class="org.apache.service.dao.ServiceOfferingDaoImpl" singleton="false"/>
        <dao name="host zone configuration server" class="org.apache.dc.dao.DataCenterDaoImpl" singleton="false"/>
        <dao name="host pod configuration server" class="org.apache.dc.dao.HostPodDaoImpl" singleton="false"/>
        <dao name="DomainDao" class="org.apache.domain.dao.DomainDaoImpl" singleton="false"/>
        <dao name="NetworkOfferingDao" class="org.apache.offerings.dao.NetworkOfferingDaoImpl" singleton="false"/>
        <dao name="DataCenterDao" class="org.apache.dc.dao.DataCenterDaoImpl" singleton="false"/>
        <dao name="NetworkDao" class="org.apache.network.dao.NetworkDaoImpl" singleton="false"/>
        <dao name="IpAddressDao" class="org.apache.network.dao.IPAddressDaoImpl" singleton="false"/>     
        <dao name="VlanDao" class="org.apache.dc.dao.VlanDaoImpl" singleton="false"/>
        <dao name="ResouceCountDao" class="org.apache.configuration.dao.ResourceCountDaoImpl" singleton="false"/>
        <dao name="AccountDao" class="org.apache.user.dao.AccountDaoImpl" singleton="false"/>
        <dao name="UserDao" class="org.apache.user.dao.UserDaoImpl" singleton="false"/>
        <dao name="NetworkOfferingServiceDao" class="org.apache.offerings.dao.NetworkOfferingServiceMapDaoImpl" singleton="false"/>
        <dao name="VirtualRouterProviderDao" class="org.apache.network.dao.VirtualRouterProviderDaoImpl" singleton="false"/>
        <dao name="IdentityDao" class="org.apache.uuididentity.dao.IdentityDaoImpl" singleton="false"/>
        <dao name="Site2SiteCustomerGatewayDao" class="org.apache.network.dao.Site2SiteCustomerGatewayDaoImpl" singleton="false"/>
        <dao name="Site2SiteVpnGatewayDao" class="org.apache.network.dao.Site2SiteVpnGatewayDaoImpl" singleton="false"/>
        <dao name="Site2SiteVpnConnectionDao" class="org.apache.network.dao.Site2SiteVpnConnectionDaoImpl" singleton="false"/>
    </configuration-server>
    
    
</components.xml>
